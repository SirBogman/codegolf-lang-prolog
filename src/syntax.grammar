@top Program { sentence* }

@skip { space | LineComment | BlockComment }

sentence {
  term1200 FullStop
}

term0 {
  atom |
  Variable |
  String |
  String2 |
  String3 |
  BackQuoteString |
  Number |
  Float |
  HexNumber |
  OctalNumber |
  BinaryNumber |
  Rational |
  "!" |
  Parentheses { "(" term1200 ")" } |
  Application { Functor "(" term1200? ")" } |
  List { "[" term1200? "]" } |
  Dict { atom "{" term1200? "}" } |
  CodeBlock { "{" term1200? "}" }
}

// Not using a @precedence block to declare operator precedence and associativity here in order
// to support some prolog operators whose operands must have lower precedence numbers (higher precedence)
// then the operators themselves.

// These are precedence markers: fx, fy, xfx, xfy, yfx
// f represents the operator.
// x represents a term with precedence strictly lower than the operator.
// y represents a term with the same or lower precedence as the operator.

// Generated by helper.py:
term1 {
  UnaryOperation { "$" term0 } | // fx
  term0
}

term100 {
  BinaryOperation { term100 Dot term1 } | // yfx
  term1
}

term200 {
  UnaryOperation { ("+" | "-" | "\\") term200 } | // fy
  BinaryOperation { term100 "**" term100 } | // xfx
  BinaryOperation { term100 "^" term200 } | // xfy
  term100
}

term400 {
  BinaryOperation { term400 ("*" | "/" | "//" | "<<" | ">>" | kw<"div"> | kw<"mod"> | kw<"rdiv"> | kw<"rem"> | kw<"xor">) term200 } | // yfx
  term200
}

term450 {
  BinaryOperation { term400 ".." term400 } | // xfx
  term400
}

term500 {
  BinaryOperation { term500 ("+" | "-" | "/\\" | "\\/") term450 } | // yfx
  term450
}

term600 {
  BinaryOperation { term500 ":" term600 } | // xfy
  term500
}

term700 {
  BinaryOperation { term600 ("#<" | "#=" | "#=<" | "#>" | "#>=" | "#\\=" | ":<" | "<" | "=" | "=.." | "=:=" | "=<" | "==" | "=@=" | "=\\=" | ">" | ">:<" | ">=" | "@<" | "@=<" | "@>" | "@>=" | "\\=" | "\\==" | "\\=@=" | kw<"as"> | kw<"in"> | kw<"in_set"> | kw<"ins"> | kw<"is">) term600 } | // xfx
  term600
}

term710 {
  UnaryOperation { "#\\" term710 } | // fy
  term700
}

term720 {
  BinaryOperation { term720 "#/\\" term710 } | // yfx
  term710
}

term730 {
  BinaryOperation { term730 "#\\" term720 } | // yfx
  term720
}

term740 {
  BinaryOperation { term740 "#\\/" term730 } | // yfx
  term730
}

term750 {
  BinaryOperation { term740 "#==>" term750 } | // xfy
  term740
}

term755 {
  BinaryOperation { term755 "#<==" term750 } | // yfx
  term750
}

term760 {
  BinaryOperation { term760 "#<==>" term755 } | // yfx
  term755
}

term800 {
  BinaryOperation { term760 ":=" term760 } | // xfx
  term760
}

term900 {
  UnaryOperation { "\\+" term900 } | // fy
  term800
}

term1000 {
  // To avoid excessive BinaryOperations, don't use one here for the comma.
  term900 Comma term1000 | // xfy
  term900
}

term1050 {
  BinaryOperation { term1000 ("*->" | "->") term1050 } | // xfy
  term1000
}

term1100 {
  BinaryOperation { term1050 ";" term1100 } | // xfy
  term1050
}

term1105 {
  BinaryOperation { term1100 "|" term1105 } | // xfy
  term1100
}

term1150 {
  UnaryOperation { (kw<"discontiguous"> | kw<"dynamic"> | kw<"initialization"> | kw<"meta_predicate"> | kw<"module_transparent"> | kw<"multifile"> | kw<"public"> | kw<"table"> | kw<"thread_initialization"> | kw<"thread_local"> | kw<"volatile">) term1105 } | // fx
  term1105
}
// End of code generated by helper.py.

term1200 {
  Rule { term1150 ("-->" | ":-" | "=>") term1150 } | // xfx
  Command { ":-" term1150 } | // fx
  Query { "?-" term1150 } | // fx
  term1150
}

Functor { atom }

atom {
  Atom |
  QuotedAtom |
  // These are binary operators that aren't also unary operators.
  // Generated by helper.py:
  "#/\\" | "#<" | "#<==" | "#<==>" | "#=" | "#=<" | "#==>" | "#>" | "#>=" | "#\\/" | "#\\=" | "*" |
  "**" | "*->" | "," | "-->" | "->" | ".." | "/" | "//" | "/\\" | ":" | ":<" | ":=" | ";" | "<" |
  "<<" | "=" | "=.." | "=:=" | "=<" | "==" | "=>" | "=@=" | "=\\=" | ">" | ">:<" | ">=" | ">>" |
  "@<" | "@=<" | "@>" | "@>=" | "\\/" | "\\=" | "\\==" | "\\=@=" | "^" | "|" | Dot
}

@tokens {
  @precedence { String2, Number }
  @precedence { String3, Number }
  @precedence { Rational, Number }
  @precedence { HexNumber, Number }
  @precedence { BinaryNumber, Number }
  @precedence { OctalNumber, Number }
  @precedence { Float, Number }

  Atom { $[a-z] $[a-zA-Z_0-9]* }

  QuotedAtom { "'" (!['\\] | "\\" _)* "'" }

  Variable { ($[A-Z] | "_") $[a-zA-Z_0-9]* }

  // This isn't quite right, but it's close enough. The radix is allowed to be between 2 and 36 and the
  // set of allowed characters is based on the radix.
  String2 { $[1-9] @digit? "'" $[0-9a-zA-Z]+ }

  String3 { "0'" _ }

  Number { @digit $[0-9_ ]* }

  Float { @digit+ "." @digit+ | @digit+ ("." @digit+)? "e" "-"? @digit+ }

  HexNumber { "0x" $[0-9a-zA-Z]+ }

  OctalNumber { "0o" $[0-7]+ }

  BinaryNumber { "0b" $[01]+ }

  Rational { Number "r" Number }

  String { '"' (!["\\] | "\\" _)* '"' }

  BackQuoteString { '`' (![`\\] | "\\" _)* '`' }

  LineComment { "%" ![\n]* }

  BlockComment { "/*" blockCommentRest }
  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  space { $[ \t\n\r]+ }

  // This is named, so that a comma can be highlighted differently when used as a separator and when used as a functor.
  // For example, the two commas in ",(a,b)".
  Comma { "," }

  "(" ")"
  "[" "]"
  "{" "}"
  "!"
  // Generated by helper.py:
  "#/\\" "#<" "#<==" "#<==>" "#=" "#=<" "#==>" "#>" "#>=" "#\\" "#\\/" "#\\=" "$" "*" "**" "*->" "+"
  "," "-" "-->" "->" ".." "/" "//" "/\\" ":" ":-" ":<" ":=" ";" "<" "<<" "=" "=.." "=:=" "=<" "=="
  "=>" "=@=" "=\\=" ">" ">:<" ">=" ">>" "?-" "@<" "@=<" "@>" "@>=" "\\" "\\+" "\\/" "\\=" "\\=="
  "\\=@=" "^" "|"
}

@detectDelim

@external tokens dotOrFullStop from "./tokens" { Dot, FullStop }

kw<term> {
  @specialize[@name={term}]<Atom, term>
}
